class Task:
    #создаем класс Task  для представления одной задачи
    # с её описанием, сроком выполнения и статусом
    def __init__(self, description, due_date):
        self.description = description
        self.due_date = due_date
        self.is_completed = False
    # создаем метод, который меняет статус задачи на выполненный
    def mark_as_completed(self):
        self.is_completed = True
    # метод для возвращения строкового представления объекта
    def __repr__(self):
        status = "Выполнено" if self.is_completed else "Не выполнено"
        return f"Задача: {self.description}, Срок: {self.due_date}, Статус: {status}"


class TaskManager:
    # метод инициализирует новый экземпляр класса с пустым списком задач.
    def __init__(self):
        self.tasks = []
    #метод добавляет новую задачу в список `tasks` менеджера задач.
    # `self.tasks` предполагает, что в классе `TaskManager` имеется атрибут `tasks`,
    # представляющий собой список объектов задач (`Task`)

    def add_task(self, description, due_date):
        new_task = Task(description, due_date)
        self.tasks.append(new_task)
    # Метод принимает индекс задачи и проверяет, находится ли он в допустимых границах
    # (то есть не меньше 0 и не больше длины списка задач
    def mark_task_completed(self, task_index):
        if 0 <= task_index < len(self.tasks):
            self.tasks[task_index].mark_as_completed()
        else:
            print("Задача с таким индексом не найдена.")

    def get_current_tasks(self):
        # Генератор списка перебирает все задачи в списке `self.tasks`
        # и выбирает только те, которые не завершены
        return [task for task in self.tasks if not task.is_completed]

task_manager = TaskManager()
task_manager.add_task("Сделать домашнее задание", "2023-10-01")
task_manager.add_task("Купить продукты", "2023-10-02")

print("Текущие задачи:")
for task in task_manager.get_current_tasks():
    print(task)

task_manager.mark_task_completed(0)

print("\nОбновленный список текущих задач:")
for task in task_manager.get_current_tasks():
    print(task)


    # Часть 2 Класс Store

class Store:
        def __init__(self, name, address):
            self.name = name
            self.address = address
            self.items = {}

        def add_item(self, item_name, price):
            self.items[item_name] = price

        def remove_item(self, item_name):
            if item_name in self.items:
                del self.items[item_name]
            else:
                print(f"Товар '{item_name}' не найден.")

        def get_item_price(self, item_name):
            return self.items.get(item_name, None)

        def update_item_price(self, item_name, new_price):
            if item_name in self.items:
                self.items[item_name] = new_price
            else:
                print(f"Товар '{item_name}' не найден.")

        def __repr__(self):
            return f"Магазин: {self.name}, Адрес: {self.address}, Ассортимент: {self.items}"

store1 = Store("Магазин 1", "Улица 1, дом 1")
store2 = Store("Магазин 2", "Улица 2, дом 2")
store3 = Store("Магазин 3", "Улица 3, дом 3")
store1.add_item("Яблоки", 0.5)
store1.add_item("Бананы", 0.75)

store2.add_item("Хлеб", 1.0)
store2.add_item("Молоко", 0.8)

store3.add_item("Сыр", 2.5)
store3.add_item("Вино", 10.0)

# Тестирование методов
print(store1)
store1.add_item("Апельсины", 0.65)
print("\nПосле добавления апельсинов:")
print(store1)

store1.update_item_price("Яблоки", 0.6)
print("\nПосле обновления цены яблок:")
print(store1)

store1.remove_item("Бананы")
print("\nПосле удаления бананов:")
print(store1)

price = store1.get_item_price("Яблоки")
print(f"\nЦена яблок: {price}")

price = store1.get_item_price("Бананы")
print(f"Цена бананов: {price}")  # Должно вернуть None
